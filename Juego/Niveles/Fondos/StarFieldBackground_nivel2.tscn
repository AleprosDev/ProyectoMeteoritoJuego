[gd_scene load_steps=9 format=2]

[ext_resource path="res://Juego/Niveles/Fondos/StarField.tscn" type="PackedScene" id=1]
[ext_resource path="res://Juego/Niveles/Fondos/FondoEstrellas.gd" type="Script" id=2]
[ext_resource path="res://Juego/Niveles/Fondos/red background 1.png" type="Texture" id=4]
[ext_resource path="res://Juego/Niveles/Fondos/red background 2.png" type="Texture" id=5]
[ext_resource path="res://Juego/Niveles/Fondos/red background 3.png" type="Texture" id=6]
[ext_resource path="res://Juego/Niveles/Fondos/planet.png" type="Texture" id=7]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

//uniform vec3 color_replace = vec3(1.0,1.0,0.0);
uniform int OCTAVE = 12;
uniform float timescale = 0.1;
uniform vec4 CLOUD1_COL: hint_color = vec4(0.41,0.64,0.78,0.4);
uniform vec4 CLOUD2_COL: hint_color = vec4(0.99,0.79,0.46,0.2);
uniform vec4 CLOUD3_COL: hint_color = vec4(0.81,0.31,0.59,1.0);
uniform vec4 CLOUD4_COL: hint_color = vec4(0.27,0.15,0.33,1.0);
uniform vec4 SPACE: hint_color = vec4(0.09,0.06,0.28,0.3);
uniform float zoomScale = 8.0;
uniform float size = 5.0;
uniform float starscale = 1.0;
uniform float prob: hint_range(0.0,1.0) = 0.98;

float rand(vec2 input){
	return fract(sin(dot(input,vec2(23.53,44.0)))*2350.45);
}

float perlin(vec2 input){
	vec2 i = floor(input);
	vec2 j = fract(input);
	vec2 coord = smoothstep(0.,1.,j);
	
	float a = rand(i);
	float b = rand(i+vec2(1.0,0.0));
	float c = rand(i+vec2(0.0,1.0));
	float d = rand(i+vec2(1.0,1.0));

	return mix(mix(a,b,coord.x),mix(c,d,coord.x),coord.y);
}

float fbm(vec2 input){
	float value = 0.0;
	float scale = 0.5;
	
	for(int i = 0; i < OCTAVE; i++){
		value += perlin(input)*scale;
		input*=2.0;
		scale*=0.5;
	}
	return value;
}

float fbmCloud(vec2 input, float minimum){
	float value = 0.0;
	float scale = 0.5;
	
	for(int i = 0; i < OCTAVE; i++){
		value += perlin(input)*scale;
		input*=2.0;
		scale*=0.5;
	}
	return smoothstep(0.,1.,(smoothstep(minimum,1.,value)-minimum)/(1.0-minimum));
}

float fbmCloud2(vec2 input, float minimum){
	float value = 0.0;
	float scale = 0.5;
	
	for(int i = 0; i < OCTAVE; i++){
		value += perlin(input)*scale;
		input*=2.0;
		scale*=0.5;
	}
	return (smoothstep(minimum,1.,value)-minimum)/(1.0-minimum);
}

void fragment(){
	vec4 originalColor = texture(TEXTURE, UV);
	float timescaled = TIME * timescale;
	//vec2 zoomUV = vec2(zoomScale * UV.x + UV.x*0.04*TIME*sin(0.07*TIME), zoomScale * UV.y + UV.y*0.05*TIME*cos(0.06*TIME));
	vec2 zoomUV2 = vec2(zoomScale * UV.x + 0.03*timescaled*sin(0.07*timescaled), zoomScale * UV.y + 0.03*timescaled*cos(0.06*timescaled));
	vec2 zoomUV3 = vec2(zoomScale * UV.x + 0.027*timescaled*sin(0.07*timescaled), zoomScale * UV.y + 0.025*timescaled*cos(0.06*timescaled));
	vec2 zoomUV4 = vec2(zoomScale * UV.x + 0.021*timescaled*sin(0.07*timescaled), zoomScale * UV.y + 0.021*timescaled*cos(0.07*timescaled));
	float tide = 0.01*sin(TIME);
	float tide2 = 0.01*cos(0.3*TIME);
	//if(color_replace == originalColor.rgb){
		vec4 nebulaTexture = vec4(SPACE.rgb, 0.5+0.2*sin(0.23*TIME +UV.x-UV.y));
		nebulaTexture += fbmCloud2(zoomUV3, 0.24 + tide)*CLOUD1_COL;
		nebulaTexture += fbmCloud(zoomUV2*0.9, 0.33 - tide)*CLOUD2_COL;
		nebulaTexture = mix(nebulaTexture,CLOUD3_COL,fbmCloud(vec2(0.9*zoomUV4.x,0.9*zoomUV4.y), 0.25+tide2));
		nebulaTexture = mix(nebulaTexture,CLOUD4_COL,fbmCloud(zoomUV3*0.7+2.0, 0.4+tide2));
		vec2 zoomstar = starscale*zoomUV2;
		vec2 pos = floor(zoomstar / size);
		float starValue = rand(pos);
		if(starValue>prob){
			vec2 center = size * pos + vec2(size, size) * 0.5;
			float t = 0.9 + 0.2 * sin(TIME * 8.0 + (starValue - prob) / (1.0 - prob) * 45.0);
			float color = 1.0 - distance(zoomstar, center) / (0.5 * size);
			nebulaTexture = mix(nebulaTexture, vec4(1.0,1.0,1.0,1.0),smoothstep(0.,1.,color * t / (abs(zoomstar.y - center.y)) * t / (abs(zoomstar.x - center.x))));
		} else {
			zoomstar *= 0.0;
			pos = floor(zoomstar / size);
			float starValue2 = rand(pos + vec2(13.0,13.0));
			if(starValue2 >= 0.95){
				vec2 center = size * pos + vec2(size, size) * 0.5;
				float t = 0.9 + 0.2 * sin(TIME * 8.0 + (starValue - prob) / (1.0 - prob) * 45.0);
				float color = 1.0 - distance(zoomstar, center) / (0.5 * size);
				nebulaTexture = mix(nebulaTexture, vec4(1.0,1.0,1.0,1.0),fbmCloud(pos,0.0)*smoothstep(0.,1.,color * t / (abs(zoomstar.y - center.y)) * t / (abs(zoomstar.x - center.x))));
			}
		}
		COLOR = vec4(nebulaTexture.rgb, 1.0);
		COLOR = vec4(nebulaTexture.rgb,nebulaTexture.a * 0.3);
	}
	//else {
	//	COLOR = originalColor;
	//}
//}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/OCTAVE = 6
shader_param/timescale = 0.8
shader_param/CLOUD1_COL = Color( 0.113725, 0.152941, 0.0666667, 1 )
shader_param/CLOUD2_COL = Color( 0.262745, 0.254902, 0.101961, 1 )
shader_param/CLOUD3_COL = Color( 0.372549, 0.423529, 0.180392, 1 )
shader_param/CLOUD4_COL = Color( 0.0705882, 0.129412, 0.0509804, 1 )
shader_param/SPACE = Color( 0.313726, 0.419608, 0.156863, 1 )
shader_param/zoomScale = 8.0
shader_param/size = 8.0
shader_param/starscale = 0.0
shader_param/prob = 0.98

[node name="StarFieldBackground" type="ParallaxBackground"]
scroll_ignore_camera_zoom = true
script = ExtResource( 2 )

[node name="ParallaxLayer" type="ParallaxLayer" parent="."]
motion_scale = Vector2( 0.2, 1 )
motion_mirroring = Vector2( 1900, 1050 )

[node name="Fondo1" type="Sprite" parent="ParallaxLayer"]
modulate = Color( 0.380392, 1, 0.396078, 1 )
position = Vector2( 963.5, 548 )
scale = Vector2( 5.98438, 5.97778 )
texture = ExtResource( 4 )

[node name="EstrellasCercanas" type="ParallaxLayer" parent="."]
modulate = Color( 1, 1, 1, 0.784314 )
motion_scale = Vector2( 0.3, 0.3 )
motion_mirroring = Vector2( 1900, 1050 )

[node name="StarField" parent="EstrellasCercanas" instance=ExtResource( 1 )]
position = Vector2( 955, 543 )
scale = Vector2( 0.4, 0.4 )
amount = 40

[node name="FondoShaderVerde" type="Sprite" parent="."]
material = SubResource( 2 )
position = Vector2( 973.25, 548.5 )
scale = Vector2( 5.99844, 5.96111 )
texture = ExtResource( 4 )

[node name="ParallaxLayer2" type="ParallaxLayer" parent="."]
motion_scale = Vector2( 0.3, 1 )
motion_mirroring = Vector2( 1900, 1050 )

[node name="Fondo2" type="Sprite" parent="ParallaxLayer2"]
modulate = Color( 0.380392, 1, 0.396078, 1 )
position = Vector2( 958, 569 )
scale = Vector2( 6.00938, 6.15556 )
texture = ExtResource( 5 )

[node name="ParallaxLayer4" type="ParallaxLayer" parent="."]
motion_scale = Vector2( 0.1, 1 )
motion_mirroring = Vector2( 7500, 10000 )

[node name="PlanetaFondo" type="Sprite" parent="ParallaxLayer4"]
modulate = Color( 0.152941, 0.854902, 0.282353, 0.768627 )
position = Vector2( 1397, 445 )
scale = Vector2( 0.2, 0.2 )
texture = ExtResource( 7 )

[node name="ParallaxLayer3" type="ParallaxLayer" parent="."]
motion_scale = Vector2( 0.5, 1 )
motion_mirroring = Vector2( 1900, 1050 )

[node name="Fondo3" type="Sprite" parent="ParallaxLayer3"]
modulate = Color( 0.380392, 1, 0.396078, 1 )
position = Vector2( 961, 544 )
scale = Vector2( 5.98125, 5.94444 )
texture = ExtResource( 6 )

[node name="ColorRect" type="ColorRect" parent="."]
visible = false
modulate = Color( 0.211765, 0.0313726, 0.0313726, 1 )
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 4.0
margin_top = 1.0
margin_right = 4.0
margin_bottom = 61.0
mouse_filter = 2
color = Color( 0.035294, 0.054902, 0.145098, 1 )

[node name="EstrellasMedias" type="ParallaxLayer" parent="."]
visible = false
modulate = Color( 1, 1, 1, 0.705882 )
motion_scale = Vector2( 0.03, 0.03 )
motion_mirroring = Vector2( 1024, 600 )

[node name="StarField" parent="EstrellasMedias" instance=ExtResource( 1 )]
visible = false
position = Vector2( 209, 217 )
amount = 7

[node name="EstrellaLejanas" type="ParallaxLayer" parent="."]
visible = false
modulate = Color( 1, 1, 1, 0.588235 )
motion_scale = Vector2( 0.01, 0.01 )
motion_mirroring = Vector2( 1024, 600 )

[node name="StarField" parent="EstrellaLejanas" instance=ExtResource( 1 )]
visible = false
position = Vector2( 716, 213 )
lifetime = 11.41
explosiveness = 0.54
randomness = 0.2
